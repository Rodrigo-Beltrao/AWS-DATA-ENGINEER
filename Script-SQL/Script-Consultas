1) Escreva uma query que retorna a quantidade de linhas na tabela Sales.SalesOrderDetail pelo campo SalesOrderID, desde que tenham pelo menos três linhas de detalhes.

Query:
SELECT 
    SalesOrderID as id, 
    COUNT(*) AS qtd 
FROM SalesOrderDetail as sod
GROUP BY SalesOrderID
HAVING qtd >= 3


2) Escreva uma query que ligue as tabelas Sales.SalesOrderDetail, Sales.SpecialOfferProduct e Production.Product e retorne os 3 produtos (Name) mais vendidos (pela soma de OrderQty), agrupados pelo número de dias para manufatura (DaysToManufacture).

Query:
SELECT * 
FROM(
  SELECT 
      ROW_NUMBER() OVER(PARTITION BY p.DaysToManufacture ORDER BY sum(sod.OrderQty) DESC) as pos,
      p.DaysToManufacture AS dtm,
        p.Name as nome,
        SUM(sod.OrderQty) AS qtd
  FROM SpecialOfferProduct sop 
  JOIN Product p ON sop.ProductID = p.ProductID
  JOIN SalesOrderDetail sod ON sop.SpecialOfferID = sod.SalesOrderDetailID
  GROUP BY nome, p.DaysToManufacture
  ) as posicao
WHERE pos <= 3


3) Escreva uma query ligando as tabelas Person.Person, Sales.Customer e Sales.SalesOrderHeader de forma a obter uma lista de nomes de clientes e uma contagem de pedidos efetuados.

Query:
SELECT
    c.CustomerID AS id,
    CONCAT(p.FirstName, ' ', p.LastName) AS nome, 
    COUNT(*) AS qtd
FROM SalesOrderHeader soh
JOIN Customer c ON soh.CustomerID = c.CustomerID
JOIN Person p ON c.PersonID = p.BusinessEntityID 
GROUP BY c.CustomerID, p.FirstName, p.LastName
ORDER BY qtd DESC;


4) Escreva uma query usando as tabelas Sales.SalesOrderHeader, Sales.SalesOrderDetail e Production.Product, de forma a obter a soma total de produtos (OrderQty) por ProductID e OrderDate.

Query:
SELECT
    sod.ProductID AS id,
    p.Name AS nome,
    SUM(sod.OrderQty) AS qtd,
    CAST(soh.OrderDate AS DATE) AS data_pedido
FROM SalesOrderDetail sod
JOIN SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID
JOIN Product p ON sod.ProductID = p.ProductID
GROUP BY id, nome, data_pedido
ORDER BY data_pedido, qtd DESC;


5) Escreva uma query mostrando os campos SalesOrderID, OrderDate e TotalDue da tabela Sales.SalesOrderHeader. Obtenha apenas as linhas onde a ordem tenha sido feita durante o mês de setembro/2011 e o total devido esteja acima de 1.000. Ordene pelo total devido decrescente.

Query:
SELECT 
    SalesOrderID as id,
    CAST(OrderDate AS DATE) AS data, 
    TotalDue AS total_devido
FROM SalesOrderHeader
WHERE OrderDate BETWEEN '2011-09-01' AND '2011-09-30' AND TotalDue > 1000
ORDER BY total_devido;
